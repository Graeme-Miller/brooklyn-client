[
  {
    "symbolicName": "1-server-template",
    "version": "0.9.0-SNAPSHOT",
    "name": "Template 1: Server",
    "javaType": null,
    "planYaml": "name: Server (Brooklyn Example)\n\n# this basic example shows how Brooklyn can provision a single raw VM\n# in the cloud or location of your choice\n\nservices:\n- type:           server\n  name:           My VM\n\n# location can be e.g. `softlayer` or `jclouds:openstack-nova:https://9.9.9.9:9999/v2.0/`,\n# or `localhost` or `byon: { nodes: [ 10.0.0.1, 10.0.0.2, 10.0.1.{1,2} ] }` \nlocation:\n  jclouds:aws-ec2:\n    # edit these to use your credential (or delete if credentials specified in brooklyn.properties)      \n    identity:     <REPLACE>\n    credential:   <REPLACE>\n    \n    region:       eu-central-1\n    \n    # we want Ubuntu, with a lot of RAM\n    osFamily:     ubuntu\n    minRam:       8gb\n    \n    # set up this user and password (default is to authorize a public key)\n    user:         sample\n    password:     s4mpl3\n\n",
    "description": "Sample YAML to provision a server in a cloud with illustrative VM properties\n",
    "tags": [
      {
        "traits": [
          "org.apache.brooklyn.entity.stock.BasicApplication",
          "org.apache.brooklyn.core.entity.StartableApplication",
          "org.apache.brooklyn.api.entity.Application",
          "org.apache.brooklyn.api.entity.Entity",
          "org.apache.brooklyn.api.objs.BrooklynObject",
          "org.apache.brooklyn.api.objs.Identifiable",
          "org.apache.brooklyn.api.objs.Configurable",
          "org.apache.brooklyn.core.entity.trait.Startable",
          "org.apache.brooklyn.api.entity.EntityLocal",
          "org.apache.brooklyn.core.entity.EntityInternal",
          "org.apache.brooklyn.core.objs.BrooklynObjectInternal",
          "org.apache.brooklyn.api.mgmt.rebind.Rebindable"
        ]
      }
    ],
    "deprecated": false,
    "links": {
      "self": "/v1/applications/1-server-template:0.9.0-SNAPSHOT/0.9.0-SNAPSHOT"
    },
    "id": "1-server-template:0.9.0-SNAPSHOT",
    "type": "1-server-template"
  },
  {
    "symbolicName": "2-bash-web-server-template",
    "version": "0.9.0-SNAPSHOT",
    "name": "Template 2: Bash Web Server",
    "javaType": null,
    "planYaml": "name: Python Web Server (Brooklyn Example)\n\n# this example builds on the previous one, \n# adding some scripts to initialize the VM\n\nservices:\n- type:           vanilla-bash-server\n  name:           My Bash Web Server VM\n  brooklyn.config:\n    install.command: |\n      # install python if not present\n      which python || \\\n        { apt-get update && apt-get install python ; } || \\\n        { yum update && yum install python ; } || \\\n        { echo WARNING: cannot install python && exit 1 ; }\n\n    customize.command: |\n      # create the web page to serve\n      cat > index.html << EOF\n      \n      Hello world.\n      <p>\n      I am ${ENTITY_INFO}, ${MESSAGE:-a Brooklyn sample}.\n      <p>\n      Created at: `date`\n      <p>\n      I am running at ${HOSTNAME}, with on-box IP configuration:\n      <pre>\n      `ifconfig | grep inet`\n      </pre>\n      \n      EOF\n\n    launch.command: |\n      # launch in background (ensuring no streams open), and record PID to file\n      nohup python -m SimpleHTTPServer ${PORT:-8020} < /dev/null > output.txt 2>&1 &\n      echo $! > ${PID_FILE:-pid.txt}\n      sleep 5\n      ps -p `cat ${PID_FILE:-pid.txt}`\n      if [ $? -ne 0 ] ; then\n        cat output.txt\n        echo WARNING: python web server not running\n        exit 1\n      fi\n      \n    shell.env:\n      HOSTNAME:     $brooklyn:attributeWhenReady(\"host.name\")\n      PORT:         $brooklyn:config(\"my.app.port\")\n      ENTITY_INFO:  $brooklyn:component(\"this\", \"\")\n      MESSAGE:      $brooklyn:config(\"my.message\")\n      \n    # custom \n    my.app.port:  8020\n    my.message:   \"good to meet you\"\n  \n  brooklyn.enrichers:\n  # publish the URL as a sensor; the GUI will pick this up (main.uri)\n  - type: org.apache.brooklyn.enricher.stock.Transformer\n    brooklyn.config:\n      uniqueTag: url-generator\n      enricher.sourceSensor: host.subnet.hostname\n      # use the definition from Attributes class, as it has a RendererHint so GUI makes it a link\n      enricher.targetSensor: $brooklyn:sensor(\"org.apache.brooklyn.core.entity.Attributes\", \"main.uri\")\n      enricher.targetValue: \n        $brooklyn:formatString:\n        - \"http://%s:%s/\" \n        - $brooklyn:attributeWhenReady(\"host.subnet.hostname\")\n        - $brooklyn:config(\"my.app.port\")\n\nlocation:\n  jclouds:aws-ec2:\n    region:       eu-central-1\n    # edit these (or delete if credentials specified in brooklyn.properties)      \n    identity:     <REPLACE>\n    credential:   <REPLACE>\n  \n",
    "description": "Sample YAML building on Template 1, \nadding bash commands to launch a Python-based web server\non port 8020\n",
    "tags": [
      {
        "traits": [
          "org.apache.brooklyn.entity.stock.BasicApplication",
          "org.apache.brooklyn.core.entity.StartableApplication",
          "org.apache.brooklyn.api.entity.Application",
          "org.apache.brooklyn.api.entity.Entity",
          "org.apache.brooklyn.api.objs.BrooklynObject",
          "org.apache.brooklyn.api.objs.Identifiable",
          "org.apache.brooklyn.api.objs.Configurable",
          "org.apache.brooklyn.core.entity.trait.Startable",
          "org.apache.brooklyn.api.entity.EntityLocal",
          "org.apache.brooklyn.core.entity.EntityInternal",
          "org.apache.brooklyn.core.objs.BrooklynObjectInternal",
          "org.apache.brooklyn.api.mgmt.rebind.Rebindable"
        ]
      }
    ],
    "deprecated": false,
    "links": {
      "self": "/v1/applications/2-bash-web-server-template:0.9.0-SNAPSHOT/0.9.0-SNAPSHOT"
    },
    "id": "2-bash-web-server-template:0.9.0-SNAPSHOT",
    "type": "2-bash-web-server-template"
  },
  {
    "symbolicName": "3-bash-web-and-riak-template",
    "version": "0.9.0-SNAPSHOT",
    "name": "Template 3: Bash Web Server and Scaling Riak Cluster",
    "javaType": null,
    "planYaml": "name: Bash Web Server and Riak Cluster (Brooklyn Example)\n\n# this example *references* the previous one, \n# combining it with a stock blueprint for a Riak cluster,\n# and shows how a sensor from the latter can be injected\n\nservices:\n\n# reference template 2, overriding message to point at riak \n- type:           2-bash-web-server-template\n  brooklyn.config:\n    my.message:   $brooklyn:formatString(\"connected to Riak at %s\",\n                      $brooklyn:entity(\"riak-cluster\").attributeWhenReady(\"main.uri\"))\n                      \n# use the off-the-shelf Riak cluster\n- type:           org.apache.brooklyn.entity.nosql.riak.RiakCluster\n  id:             riak-cluster\n  initialSize:    3\n  # and add a policy to scale based on ops per minute\n  brooklyn.policies:\n  - type: org.apache.brooklyn.policy.autoscaling.AutoScalerPolicy\n    brooklyn.config:\n      metric: riak.node.ops.1m.perNode\n      # more than 100 ops per second (6k/min) scales out, less than 50 scales back\n      # up to a max of 8 riak nodes here (can be changed in GUI / REST API afterwards)\n      metricLowerBound: 3000\n      metricUpperBound: 6000\n      minPoolSize: 3\n      maxPoolSize: 8\n      resizeUpStabilizationDelay: 30s\n      resizeDownStabilizationDelay: 5m\n    \nlocation:\n  jclouds:aws-ec2:\n    region:       eu-central-1\n    # edit these (or delete if credentials specified in brooklyn.properties)      \n    identity:     <REPLACE>\n    credential:   <REPLACE>\n\n",
    "description": "Sample YAML building on Template 2, \ncomposing that blueprint with a Riak cluster and injecting the URL\n",
    "tags": [
      {
        "traits": [
          "org.apache.brooklyn.entity.stock.BasicApplication",
          "org.apache.brooklyn.core.entity.StartableApplication",
          "org.apache.brooklyn.api.entity.Application",
          "org.apache.brooklyn.api.entity.Entity",
          "org.apache.brooklyn.api.objs.BrooklynObject",
          "org.apache.brooklyn.api.objs.Identifiable",
          "org.apache.brooklyn.api.objs.Configurable",
          "org.apache.brooklyn.core.entity.trait.Startable",
          "org.apache.brooklyn.api.entity.EntityLocal",
          "org.apache.brooklyn.core.entity.EntityInternal",
          "org.apache.brooklyn.core.objs.BrooklynObjectInternal",
          "org.apache.brooklyn.api.mgmt.rebind.Rebindable"
        ]
      }
    ],
    "deprecated": false,
    "links": {
      "self": "/v1/applications/3-bash-web-and-riak-template:0.9.0-SNAPSHOT/0.9.0-SNAPSHOT"
    },
    "id": "3-bash-web-and-riak-template:0.9.0-SNAPSHOT",
    "type": "3-bash-web-and-riak-template"
  },
  {
    "symbolicName": "4-resilient-bash-web-cluster-template",
    "version": "0.9.0-SNAPSHOT",
    "name": "Template 4: Resilient Load-Balanced Bash Web Cluster with Sensors",
    "javaType": null,
    "planYaml": "name: Resilient Load-Balanced Bash Web Cluster (Brooklyn Example)\n\n# this final example shows some of the advanced functionality:\n# defining custom sensors, and a cluster with a \"spec\", \n# policies for resilience and scaling based on that sensor,\n# and wiring a load balancer in front of the cluster\n\n# combining this with the riak cluster in the previous example\n# is left as a suggested exercise for the user\n\nservices:\n\n# define a cluster of the web nodes\n- type:           cluster\n  name:           Cluster of Bash Web Nodes\n  id:             my-web-cluster\n  brooklyn.config:\n    initialSize:  1\n    memberSpec:\n      $brooklyn:entitySpec:\n        # template 2 is used as the spec for items in this cluster\n        # with a new message overwriting the previous,\n        # and a lot of sensors defined\n        type:           2-bash-web-server-template\n        name:           My Bash Web Server VM with Sensors\n        \n        brooklyn.config:\n          my.message:   \"part of the cluster\"\n        \n        brooklyn.initializers:\n        # make a simple request-count sensor, by counting the number of 200 responses in output.txt\n        - type: org.apache.brooklyn.core.sensor.ssh.SshCommandSensor\n          brooklyn.config:\n            name: reqs.count\n            targetType: int\n            period: 5s\n            command: \"cat output.txt | grep HTTP | grep 200 | wc | awk '{print $1}'\"\n        # and publish the port as a sensor so the load-balancer can pick it up\n        - type:           org.apache.brooklyn.core.sensor.StaticSensor\n          brooklyn.config:\n            name:         app.port\n            targetType:   int\n            static.value: $brooklyn:config(\"my.app.port\")\n        \n        brooklyn.enrichers:\n        # derive reqs.per_sec from reqs.count\n        - type: org.apache.brooklyn.enricher.stock.YamlTimeWeightedDeltaEnricher\n          brooklyn.config:\n            enricher.sourceSensor: reqs.count\n            enricher.targetSensor: reqs.per_sec\n            enricher.delta.period: 1s\n        # and take an average over 30s for reqs.per_sec into reqs.per_sec.windowed_30s\n        - type: org.apache.brooklyn.enricher.stock.YamlRollingTimeWindowMeanEnricher\n          brooklyn.config:\n            enricher.sourceSensor: reqs.per_sec\n            enricher.targetSensor: reqs.per_sec.windowed_30s\n            enricher.window.duration: 30s\n        \n        # emit failure sensor if a failure connecting to the service is sustained for 30s\n        - type: org.apache.brooklyn.policy.ha.ServiceFailureDetector\n          brooklyn.config:\n            entityFailed.stabilizationDelay: 30s\n      \n        brooklyn.policies:\n        # restart if a failure is detected (with a max of one restart in 2m, sensor will propagate otherwise) \n        - type: org.apache.brooklyn.policy.ha.ServiceRestarter\n          brooklyn.config:\n            failOnRecurringFailuresInThisDuration: 2m\n  \n  # back at the cluster, create a total per-sec and some per-node average\n  brooklyn.enrichers:\n  - type: org.apache.brooklyn.enricher.stock.Aggregator\n    brooklyn.config:\n      enricher.sourceSensor: reqs.per_sec\n      enricher.targetSensor: reqs.per_sec\n      transformation: sum\n  - type: org.apache.brooklyn.enricher.stock.Aggregator\n    brooklyn.config:\n      enricher.sourceSensor: reqs.per_sec\n      enricher.targetSensor: reqs.per_sec.per_node\n      transformation: average\n  - type: org.apache.brooklyn.enricher.stock.Aggregator\n    brooklyn.config:\n      enricher.sourceSensor: reqs.per_sec.windowed_30s\n      enricher.targetSensor: reqs.per_sec.windowed_30s.per_node\n      transformation: average\n        \n  brooklyn.policies:\n  # resilience: if a per-node restart policy fails,\n  # just throw that node away and create a new one\n  - type: org.apache.brooklyn.policy.ha.ServiceReplacer\n  \n  # and scale based on reqs/sec\n  - type: org.apache.brooklyn.policy.autoscaling.AutoScalerPolicy\n    brooklyn.config:\n      # scale based on reqs/sec (though in a real-world situation, \n      # reqs.per_sec.windowed_30s.per_node might be a better choice) \n      metric: reqs.per_sec.per_node\n      \n      # really low numbers, so you can trigger a scale-out just by hitting reload a lot\n      metricUpperBound: 3\n      metricLowerBound: 1\n      \n      # sustain 3 reqs/sec for 2s and it will scale out\n      resizeUpStabilizationDelay: 2s\n      # only scale down when sustained for 1m\n      resizeDownStabilizationDelay: 1m\n\n      maxPoolSize: 10\n      \n# and add a load-balancer pointing at the cluster\n- type:           load-balancer\n  id:             load-bal\n  brooklyn.config:\n    # point this load balancer at the cluster, specifying port to forward to\n    loadbalancer.serverpool:  $brooklyn:entity(\"my-web-cluster\")\n    member.sensor.portNumber: app.port\n\nbrooklyn.enrichers:\n# publish a few useful info sensors and KPI's to the root of the app\n- type: org.apache.brooklyn.enricher.stock.Propagator\n  brooklyn.config:\n    uniqueTag:    propagate-load-balancer-url\n    producer:     $brooklyn:entity(\"load-bal\")\n    propagating:\n    - main.uri\n- type: org.apache.brooklyn.enricher.stock.Propagator\n  brooklyn.config:\n    uniqueTag:    propagate-reqs-per-sec\n    producer:     $brooklyn:entity(\"my-web-cluster\")\n    propagating:\n    - reqs.per_sec\n    - reqs.per_sec.windowed_30s.per_node\n\nlocation:\n  jclouds:aws-ec2:\n    # edit these (or delete if credentials specified in brooklyn.properties)      \n    identity:     <REPLACE>\n    credential:   <REPLACE>\n    \n    region:       eu-central-1\n    minRam:       2gb\n",
    "description": "Sample YAML to provision a cluster of the bash/python web server nodes,\nwith sensors configured, and a load balancer pointing at them,\nand resilience policies for node replacement and scaling\n",
    "tags": [
      {
        "traits": [
          "org.apache.brooklyn.entity.stock.BasicApplication",
          "org.apache.brooklyn.core.entity.StartableApplication",
          "org.apache.brooklyn.api.entity.Application",
          "org.apache.brooklyn.api.entity.Entity",
          "org.apache.brooklyn.api.objs.BrooklynObject",
          "org.apache.brooklyn.api.objs.Identifiable",
          "org.apache.brooklyn.api.objs.Configurable",
          "org.apache.brooklyn.core.entity.trait.Startable",
          "org.apache.brooklyn.api.entity.EntityLocal",
          "org.apache.brooklyn.core.entity.EntityInternal",
          "org.apache.brooklyn.core.objs.BrooklynObjectInternal",
          "org.apache.brooklyn.api.mgmt.rebind.Rebindable"
        ]
      }
    ],
    "deprecated": false,
    "links": {
      "self": "/v1/applications/4-resilient-bash-web-cluster-template:0.9.0-SNAPSHOT/0.9.0-SNAPSHOT"
    },
    "id": "4-resilient-bash-web-cluster-template:0.9.0-SNAPSHOT",
    "type": "4-resilient-bash-web-cluster-template"
  }
]